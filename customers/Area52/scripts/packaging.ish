#!/bin/bash

RPM_BUILD_IMAGE="fedora:29"
DEB_BUILD_IMAGE="ubuntu:19.10"
CONTAINER_NAME="messenger-pkg-${BUILD_NUMBER:-0}"
RPM_SOURCE="${PROJECT_DIR}/customers/${PARAM_CUSTOMER}/pkg/linux/rpm"
DEB_SOURCE="${PROJECT_DIR}/customers/${PARAM_CUSTOMER}/pkg/linux/deb"
PKG_BUILD_DIR="${PROJECT_DIR}/build-pkg/"

#********************************************************************
prepare_linux_rpm() {

  export MAJOR_VER=$(echo "$VERSION"| cut -d'.' -f1)
  export MINOR_VER=$(echo "$VERSION"| cut -d'.' -f2)
  export SUB_VER=$(echo "$VERSION"| cut -d'.' -f3)
  export BUILD_VER="${BUILD_NUMBER:-0}"

  rm -rf "${PKG_BUILD_DIR}" || true 
  mkdir -p "${PKG_BUILD_DIR}/${LINUX_NAME}"
  mkdir -p "${PKG_BUILD_DIR}/srpm"
  
  cp -rf ${BUILD_DIR}DistributionKit/* "${PKG_BUILD_DIR}/${LINUX_NAME}"
  cp -rf ${PROJECT_DIR}/VERSION_MESSENGER "${PKG_BUILD_DIR}/${LINUX_NAME}"
  cp -rf ${DEB_SOURCE}/*.png "${PKG_BUILD_DIR}/${LINUX_NAME}"
  cp -rf ${DEB_SOURCE}/*.desktop "${PKG_BUILD_DIR}/${LINUX_NAME}"  
  

 pushd "${PKG_BUILD_DIR}/srpm"
  echo "------------- Create SPEC from template ------------------------------"         
  j2 -f env -o "${LINUX_NAME}.spec" "${RPM_SOURCE}/${LINUX_NAME}.spec.in"
  echo "------------- Create archive  ------------------------------"          
  mv -f "../${LINUX_NAME}" "../${LINUX_NAME}-${MAJOR_VER}.${MINOR_VER}.${SUB_VER}"
  tar czf "${LINUX_NAME}-${MAJOR_VER}.${MINOR_VER}.${SUB_VER}.tgz" "../${LINUX_NAME}-${MAJOR_VER}.${MINOR_VER}.${SUB_VER}"
 popd
}

#********************************************************************
prepare_linux_deb() {

  export MAJOR_VER=$(echo "$VERSION"| cut -d'.' -f1)
  export MINOR_VER=$(echo "$VERSION"| cut -d'.' -f2)
  export SUB_VER=$(echo "$VERSION"| cut -d'.' -f3)
  export BUILD_VER="${BUILD_VER:-0}"

  rm -rf "${PKG_BUILD_DIR}" || true 
  mkdir -p "${PKG_BUILD_DIR}/${LINUX_NAME}"
  mkdir -p "${PKG_BUILD_DIR}/sdeb"
  
  cp -rf ${BUILD_DIR}DistributionKit/* "${PKG_BUILD_DIR}/${LINUX_NAME}"
  cp -rf ${PROJECT_DIR}/VERSION_MESSENGER "${PKG_BUILD_DIR}/${LINUX_NAME}"
  cp -rf ${DEB_SOURCE}/*.png "${PKG_BUILD_DIR}/${LINUX_NAME}"
  cp -rf ${DEB_SOURCE}/*.desktop "${PKG_BUILD_DIR}/${LINUX_NAME}"  
  
  pushd "${PKG_BUILD_DIR}/sdeb"
     echo "------------- Create DEB from template ------------------------------"         
     tar xJf ${DEB_SOURCE}/${LINUX_NAME}.debian.tar.xz
     j2 -f env -o "${LINUX_NAME}_${MAJOR_VER}.${MINOR_VER}.${SUB_VER}-${BUILD_VER}.dsc" "${DEB_SOURCE}/${LINUX_NAME}.dsc.tmpl"
     j2 -f env -o debian/changelog debian/changelog
     tar cJf ${LINUX_NAME}_${MAJOR_VER}.${MINOR_VER}.${SUB_VER}-${BUILD_VER}.debian.tar.xz debian
        rm -rf debian
     echo "------------- Create archive for SDEB  ------------------------------"
     mv -f "../${LINUX_NAME}" "../${LINUX_NAME}-$MAJOR_VER.$MINOR_VER.$SUB_VER"
     tar czf "${LINUX_NAME}_${MAJOR_VER}.${MINOR_VER}.${SUB_VER}.orig.tar.gz" "../${LINUX_NAME}-$MAJOR_VER.$MINOR_VER.$SUB_VER"
     echo "------------- Create checksum for DEB  ------------------------------"            
     file_dsc=${LINUX_NAME}_${MAJOR_VER}.${MINOR_VER}.${SUB_VER}-${BUILD_VER}.dsc
     file_deb_name=${LINUX_NAME}_${MAJOR_VER}.${MINOR_VER}.${SUB_VER}-${BUILD_VER}.debian.tar.xz
     file_src_name=${LINUX_NAME}_${MAJOR_VER}.${MINOR_VER}.${SUB_VER}.orig.tar.gz
   
     file_deb_size=$(stat --printf="%s" "$file_deb_name")
     file_src_size=$(stat --printf="%s" "$file_src_name")
   
     file_sha1_src_hash=$(sha1sum "$file_src_name" | cut -f1 -d ' ')
     file_sha256_src_hash=$(sha256sum "$file_src_name" | cut -f1 -d ' ')
     file_md5_src_hash=$(md5sum "$file_src_name" | cut -f1 -d ' ')
   
     file_sha1_deb_hash=$(sha1sum "$file_deb_name" | cut -f1 -d ' ')
     file_sha256_deb_hash=$(sha256sum "$file_deb_name" | cut -f1 -d ' ')
     file_md5_deb_hash=$(md5sum "$file_deb_name" | cut -f1 -d ' ')
   
     echo "Checksums-Sha1:" >> $file_dsc
     echo " $file_sha1_src_hash $file_src_size $file_src_name"  >> $file_dsc
     echo " $file_sha1_deb_hash $file_deb_size $file_deb_name"  >> $file_dsc
   
     echo "Checksums-Sha256:" >> $file_dsc
     echo " $file_sha256_src_hash $file_src_size $file_src_name"  >> $file_dsc
     echo " $file_sha256_deb_hash $file_deb_size $file_deb_name"  >> $file_dsc
   
     echo "Files:" >> $file_dsc
     echo " $file_md5_src_hash $file_src_size $file_src_name"  >> $file_dsc
     echo " $file_md5_deb_hash $file_deb_size $file_deb_name"  >> $file_dsc
  popd
}

#********************************************************************
docker_stop() {
  sudo docker rm "${CONTAINER_NAME}" -f || true
}

#********************************************************************
docker_run() {
  local DOCKER_BASE_IMAGE="${1}"
  docker_stop 
  sudo docker pull ${DOCKER_BASE_IMAGE}
  sudo docker run -d --rm --privileged --name ${CONTAINER_NAME} -v ${PKG_BUILD_DIR}:/home/jenkins/pkg ${DOCKER_BASE_IMAGE} bash -c "while true;do  sleep 10; done"
}

#********************************************************************
docker_exec() {
  sudo docker exec ${CONTAINER_NAME} bash -c "${@}"
}

#********************************************************************
docker_cp() {
  sudo docker cp ${CONTAINER_NAME}:"${1}" "${2}"
}

#********************************************************************
_build_deb() {
 docker_run "${DEB_BUILD_IMAGE}"
 docker_exec "apt-get -y update"
 docker_exec "apt-get -y upgrade"
 docker_exec "apt-get -y install software-properties-common build-essential make cmake gcc debhelper apt-file devscripts \
                                 dh-python python3-all-dev python3-setuptools txt2man procps gcc doxygen rsync swig cmake pbuilder \
                                 python3-psutil python3-cups python3-pyasn1 git golang python-pip python3-prettytable libcurl4-openssl-dev &&\
            add-apt-repository -y ppa:ubuntu-toolchain-r/test &&\
            pip install j2cli"

 pushd ${PKG_BUILD_DIR}/sdeb/
     print_message "Initialization pbuilder root"   
     docker_exec "pbuilder create --distribution eoan"

     print_message "Update pbuilder root"   
     docker_exec "cd /home/jenkins/pkg/sdeb && pbuilder --update"   
   
     print_message "Building DEB package"      
     docker_exec "cd /home/jenkins/pkg/sdeb && pbuilder --build $(ls *.dsc)"
   
     print_message "Copy results from container"
     docker_exec "cp -f /var/cache/pbuilder/result/*.deb /home/jenkins/pkg/sdeb/" 

     print_message "Copy deb to build directory"     
     cp -f ${PKG_BUILD_DIR}/sdeb/*.deb "${BUILD_DIR}"

     print_message "Stop docker container"
     docker_stop
 popd
}

#********************************************************************
_build_rpm() {
  print_message "Run mock for building SRPM"
  sudo mock  -r epel-8-x86_64 --buildsrpm --spec ${PKG_BUILD_DIR}/srpm/${LINUX_NAME}.spec --sources ${PKG_BUILD_DIR}/srpm  --resultdir=${PKG_BUILD_DIR}/srpm
  print_message "Run mock for building binary RPM"  
  sudo mock -r epel-8-x86_64 -n ${PKG_BUILD_DIR}/srpm/${LINUX_NAME}-*.src.rpm --resultdir=${PKG_BUILD_DIR}/srpm
  cp -f ${PKG_BUILD_DIR}/srpm/*.x86_64.rpm "${BUILD_DIR}"
}

#********************************************************************
build_linux_deb() {
  print_message "Building Linux DEB package"
  prepare_linux_deb
  _build_deb
}

#********************************************************************
build_linux_rpm() {
  print_message "Building Linux RPM package"
  prepare_linux_rpm  
  _build_rpm
}
