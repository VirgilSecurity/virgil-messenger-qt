import QtQuick 2.12
import QtQuick.Controls 2.12

Item {
    id: templateDialogItem
    anchors.fill: parent

    // Popup background settings
    property color backgroundColor: 'black'
    property real backgroundOpacity: 0.8
    property real backgroundRadius: 12

    // Bahavior settings
    property real enterTransitionDuration: 350
    property real exitTransitionDuration: 250
    property real popupImplicitWidth: 420

    // Content settings
    property string textHeader: "Text Header Example"
    property string textBody: "This is a long message. You see it because you did not initialize this popup before calling. For initialization - pass parameters to the call."

    // Button settings
    property color okBackgroundColor: 'dodgerblue'
    property color okBorderColor: Qt.darker(okBackgroundColor)
    property string okButtonText: 'Ok'

    property color cancelBackgroundColor: 'darkgray'
    property color cancelBorderColor: Qt.darker(cancelBackgroundColor)
    property string cancelButtonText: 'Cancel'

    // Signals
    signal okClicked()
    signal cancelClicked()

    function open(textHeader, textBody) {
        if (textHeader !== undefined) {
            templateDialogItem.textHeader = textHeader
        }

        if (textBody !== undefined) {
            templateDialogItem.textBody = textBody
        }

        templateDialog.open()
    }

    Popup {
        id: templateDialog

        anchors.centerIn: parent
        modal: true
        focus: true
        closePolicy: Popup.NoAutoClose
        padding: 10

        enter: Transition {
            ParallelAnimation {
                NumberAnimation {property: "opacity"; from: 0.0; to: 1.0; easing.type: Easing.InOutQuad;
                    duration: enterTransitionDuration; easing.overshoot: 1}
                NumberAnimation {property: "scale"; from: 0.0; to: 1.0; easing.type: Easing.OutBack;
                    duration: enterTransitionDuration; easing.overshoot: 2}
            }
        }

        exit: Transition {
            ParallelAnimation {
                NumberAnimation {property: "opacity"; from: 1.0; to: 0.0; easing.type: Easing.InOutQuad;
                    duration: exitTransitionDuration; easing.overshoot: 1}
                NumberAnimation {property: "scale"; from: 1.0; to: 0.0; easing.type: Easing.InOutQuad;
                    duration: exitTransitionDuration; easing.overshoot: 1}
            }
        }


        background: Rectangle {
            implicitWidth: popupImplicitWidth
            focus: false
            color: backgroundColor
            opacity: backgroundOpacity
            radius: backgroundRadius
        }

        contentItem: Column {
            spacing: 26

            Text {
                width: parent.width
                text: textHeader
                color: 'white'
                font.pointSize: 12
                wrapMode: Text.WordWrap
            }

            Text {
                width: parent.width
                text: textBody
                color: 'white'
                font.pointSize: 10
                wrapMode: Text.WordWrap
            }

            Row {
                anchors.horizontalCenter: parent.horizontalCenter
                spacing: 26

                Rectangle {
                    id: okRectangle
                    width: 128
                    height: 36
                    radius: height
                    color: okBackgroundColor
                    border.color: okBorderColor
                    border.width: 3

                    Text {
                        anchors.centerIn: parent
                        text: okButtonText
                        color: 'white'
                        font.pointSize: 10
                        wrapMode: Text.WordWrap
                    }

                    MouseArea {
                        anchors.fill: parent
                        hoverEnabled: true
                        onEntered: cursorShape = Qt.PointingHandCursor
                        onExited: cursorShape = Qt.ArrowCursor
                        onClicked: {
                            okClicked()
                            templateDialog.close()
                        }
                    }
                }

                Rectangle {
                    id: cancelRectangle
                    width: 128
                    height: 36
                    radius: height
                    color: cancelBackgroundColor
                    border.color: cancelBorderColor
                    border.width: 3
                    Text {
                        anchors.centerIn: parent
                        text: cancelButtonText
                        color: 'white'
                        font.pointSize: 10
                        wrapMode: Text.WordWrap
                    }

                    MouseArea {
                        anchors.fill: parent
                        hoverEnabled: true
                        onEntered: cursorShape = Qt.PointingHandCursor
                        onExited: cursorShape = Qt.ArrowCursor
                        onClicked: {
                            cancelClicked()
                            templateDialog.close()
                        }
                    }
                }
            }
        }

    }

}
